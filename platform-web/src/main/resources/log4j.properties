### 子Logger是否会中父级Logger(上面设置的log4j.rootCategory)的appender里面输出,默认是true
### 为true时:子级别的Logger输出后还会在父级Logger里面输出
### 为false时:log日志只会在当前级别的Logger里面输出,不会在父级Logger里面输出
log4j.rootLogger = DEBUG,stdout,debug,utils,request,exception
log4j.addivity.org.apache=true

user.dir=/opt/logs/platform/

log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%p\:%d{yyyyMMdd HH\:mm\:ss} %l

#########自定义日志输出##########

### %m   输出代码中指定的消息
### %p   输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL 
### %r   输出自应用启动到输出该log信息耗费的毫秒数 
### %c   输出所属的类目，通常就是所在类的全名 
### %t   输出产生该日志事件的线程名 
### %n   输出一个回车换行符，Windows平台为“\\r\\n”，Unix平台为“\\n” 
### %d   输出日志时间点的日期或时间,默认格式为ISO8601,也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2018年6月15日  22 ： 10 ： 28 ， 921  
### %l   输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。

##debug模块输出
#### 用来控制过来日志信息,如:下面至少是warn的信息才会输出到debug文件中
log4j.logger.debug=WARN,utils
log4j.appender.debug=org.apache.log4j.DailyRollingFileAppender
log4j.appender.debug.File=${user.dir}/debug.log
log4j.appender.debug.DatePattern='_'yyyyMMdd'.log'
log4j.appender.debug.layout=org.apache.log4j.PatternLayout
log4j.appender.debug.layout.ConversionPattern=%-d{yyyy-MM-dd HH:mm:ss} %l
log4j.additivity.debug=true

##utils模块输出
#### 用来控制过来日志信息,如:下面至少是INFO的信息才会输出到utils文件中
log4j.logger.utils=INFO,utils
log4j.appender.utils=org.apache.log4j.DailyRollingFileAppender
log4j.appender.utils.File=${user.dir}/utils.log
log4j.appender.utils.DatePattern='_'yyyyMMdd'.log'
log4j.appender.utils.layout=org.apache.log4j.PatternLayout
log4j.appender.utils.layout.ConversionPattern=%-d{yyyy-MM-dd HH:mm:ss} %l
log4j.additivity.utils=true

##excpetion模块输出
#### 用来控制过来日志信息,如:下面至少是ERROR的信息才会输出到exception文件中
log4j.logger.exception=ERROR,exception
log4j.appender.exception=org.apache.log4j.DailyRollingFileAppender
log4j.appender.exception.File=${user.dir}/exception.log
log4j.appender.exception.DatePattern='_'yyyyMMdd'.log'
log4j.appender.exception.layout=org.apache.log4j.PatternLayout
log4j.appender.exception.layout.ConversionPattern=%-d{yyyy-MM-dd HH:mm:ss} %l
log4j.additivity.exception=true

##request模块输出
#### 用来控制过来日志信息,如:下面至少是INFO的信息才会输出到Request文件中
log4j.logger.request=INFO,request
log4j.appender.request=org.apache.log4j.DailyRollingFileAppender
log4j.appender.request.File=${user.dir}/request.log
log4j.appender.request.DatePattern='_'yyyyMMdd'.log'
log4j.appender.request.layout=org.apache.log4j.PatternLayout
log4j.appender.request.layout.ConversionPattern=%-d{yyyy-MM-dd HH:mm:ss} %m
log4j.appender.request.MaxFileSize=10MB
log4j.additivity.request=true

# 开源库的日志输出控制
# logger for spring
log4j.logger.org.springframework=error

# mybaits
log4j.logger.com.ibatis=debug